<?xml version="1.0" encoding="utf-8"?>
<topic id="IOCC-Introduction" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>

      <para>The SimpleIOCContainer (Simple Inversion of Control Container) is a
        C# library providing a Dependency Injection (DI) framework promoting 
        simplicity, transparency and verifiability.</para>
    </introduction>

    <section address="GettingStarted">
      <title>Getting Started</title>
      <content>
        <para>It is available from nuget.org with the following command:</para>
        <para>
          from the command line do:
        </para>
        <para>
          <command>
            nuget install TheDisappointedProgrammer.SimpleIOCContainer -version 0.1.0-alpha
          </command>
        </para>
        <para>
          From Visual Studio Package Manager Console do:
        </para>
        <para>
          <command>
            install-package TheDisappointedProgrammer.SimpleIOCContainer -version 0.1.0-alpha
          </command>
        </para>
        <para>
          Source code is available at 
          <externalLink> 
            <linkText>https://github.com/mikedamay/SimpleIOCContainer.git</linkText>
            <linkUri>https://github.com/mikedamay/SimpleIOCContainer.git</linkUri>
          </externalLink>
        </para>
        <para>
          This documentation is located at 
          <externalLink> 
            <linkText>"http://mikedamay.co.uk/Simple/index.html"</linkText>
            <linkUri>"http://mikedamay.co.uk/Simple/index.html"</linkUri>
          </externalLink>
        </para>
        <para>
          Usage follows a simple pattern: the caller instantiates some significant object
          with a call to <codeInline>SimpleIOCContainer.CreateAndInjectDependnecies</codeInline> and that
          object is instantiated together with dependencies to which it refers
          and so forth recursively through the tree of dependencies.
        </para>
        <para>
          The call to <codeInline>CreateAndInjectDependencies</codeInline> is typically made at program
          startup.  The framework is principally concerned with singletons that
          have the same life span as the program.
        </para>
        <code>
using com.TheDisappointedProgrammer.IOCC;
[Bean]
public class Program
{
    [BeanReference] private Logger logger = null;
    public static void Main()
    {
        SimpleIOCContainer sic = new SimpleIOCContainer();
        Program prog = sic.CreateAndInjectDependencies&lt;Program&gt;();
        prog.SaySomething();
    }
    private void SaySomething()
    {
        logger.Log("Hello Simple");
    }
}
[Bean]
public class Logger
{
    public void Log(string message) => System.Console.WriteLine(message);
}          
        </code>
        <para>Notes</para>
        <list class="bullet">
          <listItem>
            <para>
              Classes to be injected are annotated with the `[Bean]` attribute.
            </para>
          </listItem>
          <listItem>
            <para>
              Classes where a bean is to be injected must also be marked as beans
            </para>
          </listItem>
          <listItem>
            <para>
              The site of the injection is annotated with the <codeInline>[BeanReference]</codeInline> attribute
            </para>
          </listItem>
          <listItem>
            <para>
              The type of a member variable where a bean is to be injected 
              should an interface, a direct or indirect base class of the bean or the the class
              that implements the bean
            </para>
          </listItem>
          <listItem>
            <para>
              Once <codeInline>CreateAndInjectDependencies</codeInline> has been called all beans will have 
              been instantiated and assigned to any matching bean references.  Typically, calls
              will only be made to the container, subsequently, if the program has other
              entry points
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="IOCC-Assemblies">Assemblies</link>
      <link xlink:href="IOCC-LimitationsAndGotchas">Limitations &amp; Gotchas</link>
      <link xlink:href="IOCC-DesignRationale">Design Rationale</link>
      <link xlink:href="IOCC-Profiles">Profiles</link>
 
      <codeEntityReference>T:com.TheDisappointedProgrammer.IOCC.SimpleIOCContainer</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
