<?xml version="1.0" encoding="utf-8"?>
<topic id="DI-BeansAndNonBeans" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Some observations on the nature of beans</para>
    </introduction>

    <section address="BeansAndNonBeans">
      <title>Remarks</title>
      <content>
        <para>
          Any concrete class or struct over which you control the
          source can be marked as a bean by applying the <codeInline>[Bean]</codeInline> attribute
          to the class declaration.
        </para>
        <para>
          Any class including that of the root bean that is intended to contain bean references
          must itself be annotated as a bean.  There is one exception to this where
          an already instantiated bean is passed as the "root" to 
          <codeEntityReference>M:PureDI.PDependencyInjector.CreateAndInjectDependencies(System.Object,PureDI.InjectionState)</codeEntityReference>.
        </para>
        <para>
          Primitive types (such as int, string) etc. cannot be beans.
          An attempt to make them beans results in a compiler error.
        </para>

        <para>
          Interfaces, abstract classes and static classes cannot be beans.
          A run-time warning will be recorded in the <legacyItalic>Diagnostics</legacyItalic> object
          if this rule is violated.
        </para>

        <para>
          An inherited class cannot be a bean if any of its derived classes
          are beans (unless the inherited class is given a different bean name
          to that of the derived classes or one of them has a matching 
          <link
            xlink:href="DI-Profiles">profile
          </link>
          and the other does not).  (Without
          a bean name to distinguish them there is no way for the injector
          to determine whether a reference to the inherited class is intended
          to refer to the inherited class itself or a derived class.)  Alternatively
          if you mark the inherited bean as <codeInline>[Ignored]</codeInline> then both beans can be
          injected but only through their respective implementation class types.
        </para>

      </content>
    </section>

    <relatedTopics>
      <link xlink:href="DI-Profiles">Profiles</link>
      <link xlink:href="DI-BeanNames">Bean Names</link>
      <codeEntityReference>T:PureDI.IgnoreAttribute</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
