<?xml version="1.0" encoding="utf-8"?>
<topic id="DI-OddsAndEnds" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>This section discusses various edge cases and topics not discussed elsewhere</para>
    </introduction>

    <section address="Remarks">
      <title>Remarks</title>
      <content>
      </content>
      <sections>
      <section>
        <title>Object Cycles</title>
        <content>

          <para>
            Problems may arise where objects directly or indirectly refer to themselves.
            In the case of member variables this kind of cyclical reference is allowed.
            In the case of constructor parameters an exception (<codeInline>DIException</codeInline>) is thrown if
            an attempt is made to inject an object into the constructor of a declaring object
            of the same type.  This is, as you would imagine, because infinite recursion would result.
          </para>
        </content>
      </section>

      <section>
        <title>
          Ignore Interface (<codeInline>[Ignore]</codeInline>)
        </title>
        <content>

          <para>
            The Ignore attribute can be annotated to any interface or class.  It addresses
            the case where some interface is implemented by multiple bean classes but is not used
            as a bean reference.  The <codeInline>Ignore</codeInline> attribute will cause the injector not to report the multiple implementations
            as duplicates in its diagnostic output.  It would typically be applied to an utility interface, say some user-inspired equivalent of IComparable or
            ISerializable.  This does not do much, it just keeps noise out of the diagnostics.
          </para>
        </content>
      </section>

      <section>
        <title>Attribute Base Classes</title>
        <content>

          <para>
            The <codeInline>[Bean]</codeInline>, <codeInline>[BeanReference]</codeInline>,
            <codeInline>[Constructor]</codeInline> and <codeInline>[Ignore]</codeInline> attributes
            are sealed classes.  In each case there is an equivalent base class
            from which user defined classes can be derived.  These base classes might be useful
            to the library user if there were a requirement for some complex 
            factory with a number of parameters
            that could be named.  The injector will treat a class derived from <codeInline>BeanBaseAttribute</codeInline>
            in exactly the same way as it treats <codeInline>BeanAttribute</codeInline>.
          </para>

          <para>As an example, the following:</para>

          <code>
            [BeanReference(Factory=typeof(EnvironmentVariableFetcher), FactoryParam="MyEnvVar")]
            private string _someEnvVar;
          </code>


          <para>would look much more approachable as:</para>

          <code>
            [EnvironmentVariable(VariableName: "MyEnvVar)]
            private string _someEnvVar;
          </code>

          <para>This can be achieved with:</para>

          <code>
            public class EnvironementVariableAttribute : BeanReferenceBaseAttribute
            {
              public EnvironementVariableAttribute(string VariableName )
              {
                base.Factory = typeof(EnvironmentVariableFetcherFactory);
                base.FactoryParam = VariableName;
              }
            }
            [Bean]
            public class EnvironmentVariableFetcherFactory : IFactory
            {
              (object rootBean, injectionState injectionState)
              = Execute(InjectionState injectionState, BeanFactoryArgs args)
              {
                string rtn = Environment.GetEnvironmentVariable(
                  (string)args.FactoryParam);
                return (rtn, injectionState);
              }
            }
          </code>
        </content>
      </section>
    </sections>
    </section>
    <relatedTopics>a
      <codeEntityReference>T:PureDI.Attributes.IgnoreAttribute</codeEntityReference>
      <codeEntityReference>T:PureDI.Attributes.BeanAttribute</codeEntityReference>
      <codeEntityReference>T:PureDI.Attributes.BeanBaseAttribute</codeEntityReference>
      <codeEntityReference>T:PureDI.Attributes.BeanReferenceAttribute</codeEntityReference>
      <codeEntityReference>T:PureDI.Attributes.BeanReferenceBaseAttribute</codeEntityReference>
      <codeEntityReference>T:PureDI.Attributes.ConstructorAttribute</codeEntityReference>
      <codeEntityReference>T:PureDI.DIException</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
