<?xml version="1.0" encoding="utf-8"?>
<topic id="DI-Glossary" revisionNumber="1">
  <developerGlossaryDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <glossary>
      <glossaryDiv address="Glossary">
        <title>Terms &amp; Definitions</title>

        <glossaryEntry>
          <terms>
            <term>Bean</term>
          </terms>

          <definition>
            <para>
              The documentation uses the term, <legacyItalic>Bean</legacyItalic>,
              rather loosely.  It refers either to a class
              marked with the <codeInline>[Bean]</codeInline> attribute 
              which is ready to be injected into
              some other class by the injector or an instance of such a  class.
              The name may seem a little misleading
              as beans imply something small and uniform.  You might expect the name
              to apply to value objects such as DTOs but beans are more typically singletons
              such as services or repositories.  Blame <externalLink>
              <linkText>Spring</linkText>
              <linkUri>http://spring.io</linkUri>
            </externalLink>.
            </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term>Injection</term>
          </terms>

          <definition>
            <para>
              <legacyItalic>Injection</legacyItalic> is the process of assignment by the injector of some object
              to the member variable or constructor parameter of some other object.  It sometimes
              loosely extended to include the creation of the injected object.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Dependency</term>
          </terms>

          <definition>
            <para>
              The documentation uses the term, <legacyItalic>Dependency</legacyItalic>, to refer to the relationship
              between two classes where one is a class to be injected and the other
              has a member which refers to the bean.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Injectable</term>
          </terms>

          <definition>
            <para>More reductive synonym for a bean.</para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Injection Site</term>
          </terms>

          <definition>
            <para>Either a member variable or a constructor parameter marked as a <codeInline>[BeanReference]</codeInline></para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Object Tree</term>
            <term>Object Model</term>
            <term>Tree</term>
          </terms>

          <definition>
            <para>
              This is a conceptual construct which sees
              the objects related by a set of injections with a root object (being of the
              type passed to <codeInline>CreateAndInjectDependnecies</codeInline>.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>injector</term>
          </terms>

          <definition>
            <para>
              The injector <codeInline>DependencyInjector</codeInline>
              controls the creation of the object tree and returns meta
              data in the form of an injection state
              so that additions can be made to the tree at subsequent entry points
              to the program.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Prototype</term>
          </terms>

          <definition>
            <para>
              This terminology is borrowed from Spring rather than javascript or
              the GOF design pattern.  The object created to be assigned to a
              <codeInline>[BeanReference(Scope=Scope.Prorotype]</codeInline> marked as a prototype is
              is not make part of the object tree but treated as a one-off.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Singleton</term>
          </terms>

          <definition>
            <para>
              This term is typically applied to services, repositories or other objects
              orchestrating the work flow of the application.  There tends to be only
              one of each type of object fulfilling a particular role.  The
              essence is that all objects in the "tree" will refer to a shared object.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>RootType</term>
            <term>RootObject</term>
            <term>Root Bean</term>
            <term>Root</term>
          </terms>

          <definition>
            <para>
              <codeInline>CreateAndInjectDependency</codeInline> takes a type known
              as the <legacyItalic>RootType</legacyItalic> as
              a starting point for injection.  It examines each of that type's
              <codeInline>[BeanReference]</codeInline> occurrences and in each case creates an appropriate
              bean which it assigns to the member or the constructor parameter.
              Alternatively, if the bean has been created for some prior reference
              then it simply assigns the same instance.  Thus the injector
              works its way recursively through a conceptual tree (more accurately, a graph) and
              following the same procedure.
            
            </para>

            <para>
              <codeInline>CreateAndInjectDependencies</codeInline> returns an object
              of <legacyItalic>Root Type</legacyItalic> and This
              is known as the <legacyItalic>Root object</legacyItalic>
              or <legacyItalic>Root Bean</legacyItalic> or just 
              <legacyItalic>root</legacyItalic>.  In many cases it will a call to
              a method of this object that kicks of processing within the application.
            </para>

            <para>
              This metaphor of root and tree works well for programs with a single
              entry point.  Typically it is necessary to call through the 
              root bean to access other beans.  It is a logical arrangement.
              However, where there are multiple entry points (and conceivably in
              some cases where there is a single entry point) the metaphor breaks
              down.  What we see is more of a graph.  "Root" can look something
              of a misnomer particularly in the corner case where the caller
              makes a call to <codeEntityReference>M:PureDI.DependencyInjector.CreateAndInjectDependencies(System.Object,PureDI.InjectionState)
              </codeEntityReference> to instantiate some object with the express purpose
              of having that object available for a tree that is subsequently created.
            </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term>scan</term>
            <term>scanning</term>
          </terms>

          <definition>
            <para>
             Assemblies are said to be scanned for injection when
             the dependency injector examines each type in the assembly
             to see whether it is a bean and if so instantiates the
             bean and carries out the same process on each of its
             member variables marked as a bean reference.
            </para>

          </definition>
        </glossaryEntry>
      </glossaryDiv>

    </glossary>
  </developerGlossaryDocument>
</topic>
