<?xml version="1.0" encoding="utf-8"?>
<topic id="IOCC-Glossary" revisionNumber="1">
  <developerGlossaryDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <glossary>
      <glossaryDiv address="Glossary">
        <title>Terms &amp; Definitions</title>

        <glossaryEntry>
          <terms>
            <term termId="xyz">1st term</term>
            <term>Other term (if any)</term>
          </terms>

          <definition>
            <para>The definition of the term(s)</para>
          </definition>

        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Bean</term>
          </terms>

          <definition>
            <para>
              The documentation uses the term, _Bean_, rather loosely.  It refers either to a class
              marked with the `[Bean]` attribute which is ready to be injected into
              some other class by the injector.  The name may seem a little misleading
              as beans imply something small and uniform.  You might expect the name
              to apply to value objects such as DTOs but beans are more typically singletons
              such as services or repositories.  Blame <externalLink>
              <linkText>Spring</linkText>
              <linkUri>http://spring.io</linkUri>
            </externalLink>.
            </para>

            <para>Alternatively, the term bean is used to refer to an instantiated object of such a class.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term>Injection</term>
          </terms>

          <definition>
            <para>
              Injection is the process of assignment by the injector of some object
              to the member variable or constructor parameter of some other object.  It sometimes
              loosely extended to include the creation of the injected object.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Dependency</term>
          </terms>

          <definition>
            <para>
              The documentation uses the term, <legacyItalic>Dependency</legacyItalic>, to refer to the relationship
              between two classes where one is an class to be injected and the other
              has a member which refers to the bean.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Injectable</term>
          </terms>

          <definition>
            <para>More descriptive synonym for a bean.</para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Injection Site</term>
          </terms>

          <definition>
            <para>Either a member variable or a constructor parameter marked as a <codeInline>[BeanReference]</codeInline></para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>(Object) Tree</term>
          </terms>

          <definition>
            <para>
              Also known as the object model.  This is a conceptual construct which sees
              the objects related by a set of injections with a root object (being the
              type passed to <codeInline>CreateAndInjectDependnecies</codeInline>.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>injector</term>
          </terms>

          <definition>
            <para>
              The injector controls the creation of the object tree and retains meta
              data so that additions can be made to the tree at subsequent entry points
              to the program.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Prototype</term>
          </terms>

          <definition>
            <para>
              This terminology is borrowed from Spring rather than javascript or
              the GOF design pattern.  The object created to be assigned to a
              `[BeanReference(Scope=Scope.Prorotype]` marked as a prototype is
              is not make part of the object tree but treated as a one-off.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>Singleton</term>
          </terms>

          <definition>
            <para>
              This term is typically applied to services, repositories or other objects
              orchestrating the work flow of the application.  There tends to be only
              one of each type of object fulfilling a particular role.
            </para>
          </definition>
        </glossaryEntry>

        <glossaryEntry>
          <terms>
            <term>RootType / RootObject</term>
          </terms>

          <definition>
            <para>
              <codeInline>CreateAndInjectDependency</codeInline> takes a type known 
              as the <legacyItalic>RootType</legacyItalic> as
              a starting point for injection.  It examines each of that type's
              <codeInline>[BeanReference]</codeInline> occurrences and in each case creates an appropriate
              bean which it assigns to the member or the constructor parameter.
              Alternatively, if the bean has been created for some prior reference
              then it simply assigns the same instance.  This the injector
              works its way through a conceptual tree (more accurately, a graph) and
              following the same procedure.
            </para>

            <para>
              <codeInline>CreateAndInjectDependencies</codeInline> returns an object 
              of <legacyItalic>Root Type</legacyItalic> and This
              is known as the <legacyItalic>Root object</legacyItalic>.  In many cases it will a call to
              a method of this object that kicks of processing within the application.
            </para>
          </definition>
        </glossaryEntry>
      </glossaryDiv>

    </glossary>
  </developerGlossaryDocument>
</topic>
