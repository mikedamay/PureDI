<?xml version="1.0" encoding="utf-8"?>
<topic id="IOCC-BeanFactory" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>Bean Factories are an essential mechanism for extending the power of injection
      and work round the limitations of the library</para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="BeanFactory">
      <title>Remarks</title>
      <content>
        <para>
          In some situations there is no straightforward way for the container
          to know how to create a required bean.  For instance a repository might need
          to be connected to its database before it can be injected.
        </para>

        <para>This problem is overcome with the use of bean factories.</para>

        <para>
          A factory is specified as a parameter to the BeanReference attribute.
          So instead of creating some implementation of the member variable
          type, the container calls the execute method of the factory which
          creates and provides an object of the appropriate type.
        </para>

        <para>
          A factory parameter (`FactoryParameter`) specified on the bean reference
          can optionally be passed to the factory's execute method.
        </para>

        <para>The following code provides a simple example.</para>

        <code>
          using System;
          using com.TheDisappointedProgrammer.IOCC;

          [Bean]
          public class FactoryUser
          {
          [BeanReference(Factory = typeof(EnvironmentVariableFactory))]
          private IRepository2 repo = null;
          public static void Main()
          {
          var factoryUser = new SimpleIOCContainer().CreateAndInjectDependencies&lt;FactoryUser>().rootBean;
        Console.WriteLine(factoryUser.repo.GetData());
                // will print null unless you happen to have an environment
                // variable called CONNECTION_STRING
    }
}
[Bean]
public class EnvironmentVariableFactory : IFactory
{
    public (object bean, InjectionState injectionState) Execute(InjectionState injectionState, BeanFactoryArgs args)
    {
        return (new Repository(Environment.GetEnvironmentVariable("CONNECTION_STRING")), injectionState);
    }
}

public class Repository : IRepository2
{
    private readonly string _connectionString;
    public Repository(string connectionString)
    {
        _connectionString = connectionString;
    }

    public string GetData()
    {
        return _connectionString;
    }
}

public interface IRepository2
{
    string GetData();
}
        </code>

        <para>Note:</para>
        <list>
          <listItem>
            <para>
              Classes over which the library user has no control can
              be injected using factories.  This can include strings, ints etc.
            </para>
          </listItem>
          <listItem>
            <para>Factories must be marked with the `[Bean]` attribute</para>
          </listItem>
          <listItem>
            <para>Factories must implement the `IFactory` interface</para>
          </listItem>
          <listItem>
            <para>
              Many use cases not covered by other mechanisms can be
              addressed with the use of bean factories.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference>F:com.TheDisappointedProgrammer.IOCC.BeanBaseAttribute.Profile</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
