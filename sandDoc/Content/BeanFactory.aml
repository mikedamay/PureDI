<?xml version="1.0" encoding="utf-8"?>
<topic id="DI-BeanFactory" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Bean Factories are an essential mechanism for extending the power of injection
      and work round the limitations of the library</para>
    </introduction>

    <section address="BeanFactory">
      <title>Remarks</title>
      <content>
        <para>
          In some situations there is no straightforward way for the injector
          to know how to create a required bean.  For instance a repository might need
          to be connected to its database before it can be injected.
        </para>

        <para>This problem is overcome with the use of bean factories.</para>

        <para>
          A factory is specified as a parameter to the BeanReference attribute.
          So instead of creating some implementation of the member variable
          type, the injector calls the <codeInline>Execute</codeInline> method of the factory which
          creates and provides an object of the appropriate type.
        </para>

        <para>
          An optional factory parameter (<codeInline>FactoryParameter</codeInline>) specified on the bean reference
          will be passed to the factory's execute method.
        </para>

        <para>The following code provides a simple example.</para>
        <code language="c#" source="..\SampleCode\BeanFactoryDemo.cs" region="main"/>
        <para>
          The code example above shows a <legacyItalic>FactoryUser</legacyItalic> class 
          which uses an implementation of <legacyItalic>IRepository2</legacyItalic>.
        </para>
        <para>
          When the injector encounters the reference it instantiates the factory
          <legacyItalic>EnvironmentVariableFactory</legacyItalic> and invokes its
          Execute method behind the scenes which, as you can see, instantiates
          a repository and returns it to the injector which will assign it
          to the member variable (<legacyItalic>repo</legacyItalic>).
        </para>
      </content>
      <sections>
        <section address="UseCases">
          <title>Use Cases:</title>
          <content>
            <para>
              <legacyBold>Primitives - </legacyBold>Factories allow you to inject values into non-classes such as strings
              or integers
            </para>
            <para>
              <legacyBold>3rd Party Classes - </legacyBold>You can use factories
              to instantiate and inject classes where you do not control the source.
            </para>
            <para>
              <legacyBold>Classes Requiring Initialisation</legacyBold>
            </para>
          </content>
        </section>
        <section address="Note">
          <title>Note:</title>
          <content>
            <list class="bullet">
              <listItem>
                <para>
                  Classes over which the library user has no control can
                  be injected using factories.  This can include strings, ints etc.
                </para>
              </listItem>
              <listItem>
                <para>
                  Factories must be marked with the <codeInline>[Bean]</codeInline> attribute
                </para>
              </listItem>
              <listItem>
                <para>
                  Factories must implement the <codeInline>IFactory</codeInline> interface
                </para>
              </listItem>
              <listItem>
                <para>
                  Many use cases not covered by other mechanisms can be
                  addressed with the use of bean factories.
                </para>
              </listItem>
              <listItem>
                <para>
                   An instance of <codeInline>InjectionState</codeInline> is
                   passed as a parameter to Execute by the injector.  An instance
                   of <codeInline>InjectionState</codeInline> must be returned.
                   In most cases you should simply return the instance passed
                   as a parameter.  The exception is where a call to 
                   <codeInline>CreateAndInjectDependencies</codeInline> is made within
                   the implementation of Execute as this will typically cause
                   the injection state to be changed.  Simply return the
                   value returned by <codeInline>CreateAndInjectDependencies</codeInline>
                </para>
              </listItem>
            </list>
          </content>
        </section>
      </sections> 
    </section>

    <relatedTopics>
      <link xlink:href="3a5d7e35-2d4c-4f46-862b-122d83fa5047">Injection State &amp; Multiple Entrypoints</link>
      <codeEntityReference>T:PureDI.Attributes.IFactory</codeEntityReference>
      <codeEntityReference>T:PureDI.Attributes.BeanReferenceAttribute</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
