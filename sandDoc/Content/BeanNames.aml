<?xml version="1.0" encoding="utf-8"?>
<topic id="IOCC-BeanNames" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>The following is a discussion of how bean names are used to support 
      automatic injection in the face of multiple implementations
      of an interface</para>
    </introduction>

    <section address="Section1">
      <title>Bean Names</title>
      <content>
        <para>
          Bean names address the case where there are multiple implementations of
          some interface and a bean reference needs to specify which implementation is required.
          This is achieved by passing a `Name` property to the `[BeanReference]` attribute.
        </para>

        <para>The following code (BeanNames.cs) illustrates this:</para>
        <code>
using com.TheDisappointedProgrammer.IOCC;

[Bean]
public class DuplicateBean
{
    [BeanReference] private IRepository mainDB = null;
    [BeanReference(Name = "mongo")] private IRepository mongoDB = null;

    public static void Main()
    {
        var beans = new SimpleIOCContainer().CreateAndInjectDependencies&lt;DuplicateBean>().rootBean;
        beans.ListDatabases();
    }
    private void ListDatabases()
    {
        System.Console.WriteLine($"our main database is {mainDB.Id}");
        // this will display "SqlServerDB"
        System.Console.WriteLine($"our document database is {mongoDB.Id}");
        // this will display "magnificent mongo""
    }
}

internal interface IRepository
{
    string Id { get; }
}
[Bean]
internal class SqlServerDB : IRepository
{
    public string Id => "SqlServerDB";
}

[Bean(Name = "Mongo")]
internal class MongoDB : IRepository
{
    public string Id => "magnificent mongo";
}
        </code>
        <para>Note:</para>

        <list class="bullet">
          <listItem>
            <para>
              The bean reference can specify an interface (or a base class as long as it is
              not itself a bean) as an alternative to specifying
              the implementation class.  It is left up to the
              container to associate the reference with a concrete class.
            </para>
          </listItem>
          <listItem>
            <para>
              In the above example two repositories are instantiated; one for SQL Server
              and one for Mongo.  They both have share an interface but the container
              uses the name specified in the bean reference to select the appropriate
              implementation.
            </para>
          </listItem>
          <listItem>
            <para>
              If no name is specified then this is equivalent to an empty string.  Unlike the case with
              _Profiles_ if no bean is found with a name matching that of the bean reference
              then the bean instantiation will fail.
            </para>
          </listItem>
          <listItem>
            <para>Bean names are case insensitive.</para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
