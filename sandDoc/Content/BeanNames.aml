<?xml version="1.0" encoding="utf-8"?>
<topic id="DI-BeanNames" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>The following is a discussion of how bean names are used to support 
      automatic injection in the face of multiple implementations
      of an interface</para>
    </introduction>

    <section address="Remarks">
      <title>Remarks</title>
      <content>
        <para>
          Use of bean names addresses the case where there are multiple implementations of
          some interface.  Use of interfaces instead of concrete classes is the key to
          flexibility but poses a problem to the injector of which implementation to 
          select.  Therefore a bean reference needs to specify which implementation is required.
          This is achieved by passing a `Name` property to the <codeInline>[BeanReference]</codeInline> attribute.
        </para>

        <para>The following code illustrates this:</para>
        <code language="c#" source="..\SampleCode\BeanNamesDemo.cs" region="main"/>
        <para>
          In the above example two repositories are instantiated; one for SQL Server
          and one for Mongo.  They share an interface <codeInline>IRepository</codeInline> but the injector
          uses the name specified in the bean reference to select the appropriate
          implementation.
        </para>
      </content>

      <sections>
        <section address="UseCases">
          <title>Use Cases:</title>
          <content>
            <para>
              A good use case would be that of a client class that needs to
              have references to more than one repository but to address them
              through the same interface.
            </para>
            <para>
              <legacyBold>Problem Avoidance - </legacyBold>most of the time the
              mechanism is used to avoid problems caused by multiple derived
              classes to the injection mechanism which simply needs some way
              to distinguish between them.
            </para>
          </content>
        </section>
        <section address="Note">
          <title>Note:</title>

          <content>
            <list class="bullet">
              <listItem>
                <para>
                  Background: PureDI allows the bean reference to specify an interface (or a base class as long as it is
                  not itself a bean) as an alternative to specifying
                  the implementation class.  It is left up to the
                  injector to associate the reference with a concrete class.
                </para>
              </listItem>
              <listItem>
                <para>
                  If no name is specified then this is equivalent to an empty string.  
                  If no bean is found with a name matching that of the bean reference
                  then the bean instantiation will fail.
                </para>
              </listItem>
              <listItem>
                <para>Bean names are case insensitive.</para>
              </listItem>
            </list>
          </content>
        </section>
      </sections> 
    </section>

    <relatedTopics>
      <codeEntityReference linkText="BeanBaseAttribute.Name">P:PureDI.Attributes.BeanBaseAttribute.Name</codeEntityReference>
      <codeEntityReference linkText="BeanReferenceBaseAttribute.Name">P:PureDI.Attributes.BeanReferenceBaseAttribute.Name</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
