<?xml version="1.0" encoding="utf-8"?>
<topic id="IOCC-InjectionByConstructor" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>As an alternative to member injection constructor parameters can be used.
      This is discussed below.</para>
    </introduction>

    <section address="Constructors">
      <title>Constructors</title>
      <content>
        <para>
          It is not always convenient to inject beans directly into the
          member variables of an object.  Apart from accommodating existing
          code there are cases where processing is required on the injected
          beans before the declaring object is ready for use.  Finally,
          there are cases where different injections require different
          constructors to be called.
        </para>

        <para>
          In the case of multiple constructors the bean reference takes
          a `ConstructorName` parameter which is matched up to a name
          passed to the <codeInline>[Constructor]</codeInline> attribute.
        </para>

        <para>The following code illustrates a simple implementation:</para>
        <code>
using System;
using BeanNamesRunner;
using com.TheDisappointedProgrammer.IOCC;

[Bean]
public class Constructor
{
    [BeanReference]
    private ISomeService someService = null;

    public static void Main()
    {
        var constructor = new PDependencyInjector()
          .CreateAndInjectDependencies&lt;Constructor>().rootBean;
        constructor.someService.DoMeAFavour();   // writes "SomeData"
    }
}

public interface ISomeService
{
    void DoMeAFavour();
}

[Bean]
public class SomeService : ISomeService
{
    private ISomeRepository _repo;
    [Constructor]
    public SomeService([BeanReference] ISomeRepository repo)
    {
        repo.Init("myConnection");
        _repo = repo;
    }
    public void DoMeAFavour()
    {
        Console.WriteLine(_repo.GetSomeData()); 
    }

}
[Bean]
public class SomeRepository : ISomeRepository
{
    private string _connectionString;

    public string GetSomeData()
    {
        return "someData";
    }

    public void Init(string initString)
    {
        _connectionString = initString;
    }
}

public interface ISomeRepository
{
    string GetSomeData();
    void Init(string connectionSTring);
}
        </code>
      </content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
