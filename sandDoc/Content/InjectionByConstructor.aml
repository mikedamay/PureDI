<?xml version="1.0" encoding="utf-8"?>
<topic id="IOCC-InjectionByConstructor" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>As an alternative to member injection, constructor parameters can be injected.
      This is discussed below.</para>
    </introduction>

    <section address="Constructors">
      <title>Remarks</title>
      <content>
        <para>
          It is not always convenient to inject beans directly into the
          member variables of an object.  Apart from accommodating existing
          code there are cases where processing is required on the injected
          beans before the declaring object is ready for use.  Finally,
          there are cases where different injections require different
          constructors to be called.
        </para>

        <para>
          In the case of multiple constructors the bean reference takes
          a <codeInline>ConstructorName</codeInline> parameter which is matched up to a name
          passed to the <codeInline>[Constructor]</codeInline> attribute.
        </para>

        <para>The following code illustrates a simple implementation:</para>
        <code language="c#">
using System;
using PureDI;

[Bean]
public class ConstructorUser
{
    [BeanReference]
    private ISomeService someService = null;

    public static void Main()
    {
        var constructorUser = new PDependencyInjector()
          .CreateAndInjectDependencies&lt;ConstructorUser>().rootBean;
        constructorUser.someService.DoMeAFavour();   // writes "SomeData"
    }
}

public interface ISomeService
{
    void DoMeAFavour();
}

[Bean]
public class SomeService : ISomeService
{
    private ISomeRepository _repo;
    [Constructor]
    public SomeService([BeanReference] ISomeRepository repo)
    {
        repo.Init("myConnection");
        _repo = repo;
    }
    public void DoMeAFavour()
    {
        Console.WriteLine(_repo.GetSomeData()); 
    }

}

public interface ISomeRepository
{
    string GetSomeData();
    void Init(string connectionSTring);
}
[Bean]
public class SomeRepository : ISomeRepository
{
    private string _connectionString;

    public string GetSomeData()
    {
        return "someData";
    }

    public void Init(string initString)
    {
        _connectionString = initString;
    }
}
        </code>
        <para>
          In the code example above <legacyItalic>ConstructorUser</legacyItalic>
          instantiates <legacyItalic>SomeService</legacyItalic> by calling the latter's
          constructor.  This allows SomeService to call Init on the repository which
          it refers to.
        </para>
        <para>For the sake of clarity note that the above could have been achieved
        with member injection by exposing <legacyItalic>_repo</legacyItalic> as a public read only property.
        However, I would suggest that using a constructor
        here is better style.
      </para>
      </content>
      <sections>
        <section address="UseCases">
          <title>Use Cases:</title>
          <content>
            <para>
              <legacyBold>Legacy Code</legacyBold>
            </para>
            <para>
              <legacyBold>Shared Code: </legacyBold>If code is shared between
              code bases that use <legacyItalic>PureDI</legacyItalic> and ones
              that don't then constructor injection may play a part.
            </para>
            <para>
              <legacyBold>Technical Constraints: </legacyBold> testing frameworks
              or other development tools may force the use of constructors.
            </para>
            <para>
              <legacyBold>Less Magical: </legacyBold> You may feel that
              the use of constructors is more expressive.  But if that's the
              case you probably avoid DI anyway.
            </para>
          </content>
        </section>
        <section address="Notes">
          <title>Notes:</title>
          <content>
            <list class="bullet">
              <listItem>
                <para>
                  You can mix constructor injection with member variable injection in the
                  same object.  If you specify both for some member then the
                  constructor injection will be the effective one.
                </para>
              </listItem>
              <listItem>
                <para>
                  Where constructor injection is used all parameters of that constructor
                  must be marked as <codeInline>[BeanReference]</codeInline>.
                </para>
              </listItem>
              <listItem>
                <para>
                  There is nothing to prevent a class from having
                  some constructors which are subject to injection and others
                  that are not
                </para>
              </listItem>
            </list>
          </content>
        </section>
      </sections>    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
