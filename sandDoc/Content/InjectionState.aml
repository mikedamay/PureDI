<?xml version="1.0" encoding="utf-8"?>
<topic id="3a5d7e35-2d4c-4f46-862b-122d83fa5047" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>The following discussion of injection state may be worth following as
      the design approach is slightly unusual</para>
    </introduction>

    <section address="Remarks">
      <title>Remarks</title>
      <content>
        <para>
          The concept of the injection state (<codeEntityReference>T:PureDI.InjectionState</codeEntityReference>)
          is critical to an advanced use of the injector mechanism where multiple entry points are involved.
        </para>
        <para>The use case may be request handlers in a web or similar server, event handlers in
        interactive, multiple entry points in a library which takes <legacyItalic>PureDI</legacyItalic> 
        as a dependency and presumably others where the library user needs to avoid
        keeping the object tree around for the entire lifetime of the program</para>
        <code>
using System;
using System.Linq;
using PureDI;

public class InjectionStateUser
{
    public static void Main()
    {
        InjectionState injectionState;
        PermanentService ps;
        var pdi = new PDependencyInjector();
        (ps, injectionState) = pdi.CreateAndInjectDependencies&lt;PermanentService>();
        InjectionState transitoryState = injectionState;
        for (int ii = 0; ii &lt; 10; ii++)
        {
            BigData bigData;
            (bigData, transitoryState)
                = pdi.CreateAndInjectDependencies&lt;BigData>(injectionState);
            Console.WriteLine(bigData.AddUp());     // 500_000_500_000
                                                    // 500_000_500_000
                                                    // 500_000_500_000
                                                    // 500_000_500_000
                                                    // 500_000_500_000
                                                    // 500_000_500_000
                                                    // 500_000_500_000
                                                    // 500_000_500_000
                                                    // 500_000_500_000
                                                    // 500_000_500_000
        }
    }
}

[Bean]
public class PermanentService
{
    public int GetData(int ii)
    {
        return ii + 1;
    }
}

[Bean]
public class BigData
{
    private int[] blob = new int[1_000_000];
    [BeanReference] private PermanentService permanent = null;
    private decimal agg;

    public decimal AddUp()
    {        
        for (int ii = 0; ii &lt; blob.Length; ii++)
        {
            blob[ii] = permanent.GetData(ii);
        }
        blob.Sum(b => agg += b);
        return agg;
    }
}
        </code>
        <para>
          This contrived example shows a "permanent" service being created which will last
          the lifetime of the program.   Then ten calculations are made with the
          <legacyItalic>BigData</legacyItalic> object which takes the permanent
          service as a reference.  <legacyBold>BigData</legacyBold> is instantiated
          each time because the injection state that is used in the subsequent calls
          <legacyItalic>to CreateAndInjectDependencies</legacyItalic> does not include a record of it.          
        </para>
        <para>
          If the code is changed to pass <legacyItalic>transitoryState</legacyItalic> instead
          of <legacyItalic>injectionState</legacyItalic> then BigData would be instantiated
          only the first time through the loop.  Instead of the result being consistently
          500,000,500,000, it will change each time it is printed doubling, times 3 etc.
        </para>
      </content>
      <sections>
        <section address="UseCases">
          <title>Use Cases:</title>
          <content>
            <para>
              The following discuss areas where it might be necessary to invoke
              <codeInline>CreateAndInectDependencies</codeInline> with a non-empty
              injection state</para>
            <para>
              <legacyBold>Web Requests: </legacyBold>An object tree might be
              instantiated in a handler at the start of the request and
              would be expected to disappear (assuming nothing had kept a reference
              to any of the objects) when the injection state went out of scope
              at the end of the request
            </para>
            <para>
              <legacyBold>Web Session: </legacyBold>Similarly to the web request
              session data could be instantiated using the injector at when
              the user logs in and the injection state stored in the session object
              so as to automatically surrender its references when the session
              object is no longer required.
            </para>
            <para>
              <legacyBold>Interactive UI: </legacyBold>Where a user triggered event
              occurs an object tree may be created linking up with the main object tree
              and this would automatically go out of scope at the end of the event.
            </para>
          </content>
        </section>
        <section address="Notes">
          <title>Notes:</title>
          <content>
            <para>
              <codeInline>PDependencyInjector</codeInline> is immutable so it follows that
              the injection state instance can passed to any instance of the injector.
              However the injector must have the same set of profiles as the one that
              created <codeInline>InjectionState</codeInline>
            </para>
          </content>
        </section>
      </sections>
    </section>

    <relatedTopics>
      <codeEntityReference>T:PureDI.InjectionState</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
