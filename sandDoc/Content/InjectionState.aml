<?xml version="1.0" encoding="utf-8"?>
<topic id="3a5d7e35-2d4c-4f46-862b-122d83fa5047" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>The following discussion of injection state may be worth following as
      the design approach is slightly unusual</para>
    </introduction>

    <section address="Remarks">
      <title>Remarks</title>
      <content>
        <para>
          The concept of the injection state (<codeEntityReference>T:PureDI.InjectionState</codeEntityReference>
          is critical to an advanced use of the injector mechanism where multiple entry points are involved.
        </para>
        <para>The use case may be request handlers in a web or similar server, event handlers in
        interactive, multiple entry points in a library which takes <legacyItalic>PureDI</legacyItalic> 
        as a dependency and presumably others where the library user needs to avoid
        keeping the object tree around for the entire lifetime of the program</para>
        <code>
using System;
using System.Linq;
using PureDI;

public class InjectionStateUser
{
    public static void Main()
    {
        InjectionState injectionState;
        PermanentService ps;
        var pdi = new PDependencyInjector();
        (ps, injectionState) = pdi.CreateAndInjectDependencies&lt;PermanentService>();
        InjectionState transitoryState = injectionState;
        for (int ii = 0; ii &lt; 10; ii++)
        {
            BigData bigData;
            (bigData, transitoryState)
                = pdi.CreateAndInjectDependencies&lt;BigData&gt;(injectionState);
            Console.WriteLine(bigData.AddUp());     // 500_000_500_000 ( 1 + 1_000_000) * 500_000)
        }
    }
}

[Bean]
public class PermanentService
{
    public int GetData(int ii)
    {
        return ii + 1;
    }
}

[Bean]
public class BigData
{
    private int[] blob = new int[1_000_000];
    [BeanReference] private PermanentService permanent;
    private decimal agg;

    public decimal AddUp()
    {        
        for (int ii = 0; ii &lt; blob.Length; ii++)
        {
            blob[ii] = permanent.GetData(ii);
        }
        blob.Sum(b => agg += b);
        return agg;
    }
}
        </code>
        <para>
          This contrived example shows a "permanent" service being created which will last
          the lifetime of the program.   Then ten calculations are made with the
          <legacyItalic>BigData</legacyItalic> object which takes the permanent
          service as a reference.  <legacyBold>BigData</legacyBold> is instantiated
          each time because the injection state that is used in the subsequent calls
          <legacyItalic>to CreateAndInjectDependencies</legacyItalic> does not include a record of it.          
        </para>
        <para>
          If the code is changed to pass <legacyItalic>transitoryState</legacyItalic> instead
          of <legacyItalic>injectionState</legacyItalic> then BigData would be instantiated
          only the first time through the loop.  Instead of the result being consistently
          500,000,500,000, it will change each time it is printed doubling, times 3 etc.
        </para>
      </content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
