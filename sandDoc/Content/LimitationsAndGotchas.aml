<?xml version="1.0" encoding="utf-8"?>
<topic id="DI-LimitationsAndGotchas" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Below is a list of limitations of the library and library behaviour that may
      catch out the unsuspecting user</para>
    </introduction>


    <section address="Remarks">
      <title>Remarks</title>
      <content>
      </content>
      <sections>
        <section address="Limitations">
          <title>Limitations</title>
          <content>
            <list class="ordered">
               <listItem>
                <para>
                  <legacyBold>Static classes</legacyBold> do not participate and cannot be included
                  in any way in the injection mechanism
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>readonly</codeInline> properties cannot have their value set by injection.  A constructor
                  or field must be involved.
                  By contrast readonly <legacyItalic>fields</legacyItalic> can be the target of injections.
                </para>
              </listItem>
              <listItem>
                <para>There is no way to inject through a variadic constructor</para>
              </listItem>
              <listItem>
                <para>
                  <legacyBold>Bean Names vs. Profiles: </legacyBold> is not possible to combine alternative implementations with parallel implementations.
                  Suppose we have an <codeInline>IRepository</codeInline> interface
                  and two concrete classes that implement it say
                  <codeInline>LocalRepository</codeInline>
                  and <codeInline>RemoteRepository</codeInline>.
                  We cannot meet a requirement where a) in
                  production some classes need the <legacyItalic>LocalRepository</legacyItalic>
                  (say for configuration settings) and
                  some classes the <legacyItalic>RemoteRepository</legacyItalic>
                  (for general use) and b) on the developer machine
                  both repositories should be <legacyItalic>LocalRepository</legacyItalic>.
                  In the first case we need the remote
                  repository to have a bean <legacyBold>name</legacyBold>, say "remote", and
                  in the second case a <legacyBold>profile</legacyBold>, say "dev",
                  but no <legacyBold>name</legacyBold>.
                </para>
                <para>
                  One workaround is to have four versions of the repository
                  each having an unique combination of name and profile.  This
                  might be achieved with some thin "wrapper" derived classes.
                  Alternatively the use of factories and factory parameters
                  could be considered.
                </para>
              </listItem>
              <listItem>
                <para>
                  A comparison with Java's fully featured Spring container is informative.
                </para>
                <para>
                  One key difference is the <legacyBold>absence of an external configuration</legacyBold> mechanism (in Spring's case
                  , XML files) reduces the expressiveness and flexibility of PureDI in orchestrating
                  alternative configurations say for a development versus a production environment or
                  to meet the varying requirements of different customers.  PureDI does support
                  multiple configurations that can be selected at runtime but the logic is distributed
                  throughout the code base, thus limiting the ability to reason about the configuration.
                </para>
                <para>
                  Perhaps the most serious limitation of PureDI is the <legacyBold>role of types</legacyBold> (classes and interfaces)
                  as the sole mechanism for defining beans.  Spring provides the facility to define beans
                  as instances through both XML and Java configuration.  A class such as a repository can be
                  instantiated twice once with a local connection and once with a remote connection.  Although
                  PureDi allows the library user to achieve the same effect by instantiating bean instances
                  in code and injecting them into the object hierarchy, this unsystematic and hampers orchestration
                  , reasoning about the configuration, static and runtime analysis.
                </para>
                <para>
                  Many limitations can be worked around by instantiating beans before injecting them.
                  Although this approach reduces expressiveness and flexibility it does allow functionality to
                  be implemented in many cases without jettisoning the entire mechanism.
                </para>
                <para>
                  The following limitations are evident from a comparison with Spring core framework: 
                </para>
                <listItem>
                  <para>
                  There are <legacyBold>no post-initialisation or pre-destruction</legacyBold> callbacks or entry points.  To work round this
                  the library user can institute some sort of registry of call backs with which beans collaborate.               
                  </para>
                </listItem>
                <listItem>
                  <para>
                    There is <legacyBold>no provision for the aliasing</legacyBold> of bean names
                  </para>
                </listItem>
                <listItem>
                  <para>
                    There is no equivalent to Spring's <legacyBold>lookup-method injection</legacyBold>.  The "workaround" is to inject
                    all beans at the entry point.
                  </para>
                </listItem>
                <listItem>
                  <para>
                    There are <legacyBold>no web-request, web-session, application, web socket or custom bean scopes</legacyBold>.  This is mitigated
                    by the fact that beans can be effectively scoped under user control by the use of InjectionStates
                    and appropriate coding at entry points.  It is notable that Spring assigns scope to a bean
                    whereas PureDI assigns it to a reference.
                  </para>
                </listItem>
                <listItem>
                  <para>
                    <legacyBold>No auto wiring</legacyBold>.  Spring allows the injection of non-spring-bean objects such as a third party repository.
                    The natural workaround for this is to inject an object into the hierarchy.
                  </para>
                </listItem>
                <listItem>
                  <para>
                    There is <legacyBold>no equivalent of Spring's PropertyOverrideConfigurer</legacyBold> which supports a mechanism where values
                    of member variables can be set by specifying their "object-path" in the configuration.  This is too complex
                    for PureDI's approach.
                  </para>
                </listItem>
                <listItem>
                  <para>
                    There is <legacyBold>no injection via arbitrary methods.</legacyBold>  Spring allows logic outside the constructor to be identified
                    as an injection point.  One or more beans can be injected by passing them as parameters.  This approach
                    promoting expressiveness and flexibility is not available in PureDI.
                  </para>
                </listItem>
                <listItem>
                  <para>
                    <legacyBold>Member variables that are collections cannot be handled</legacyBold> by PureDI.  The workaround is to use some sort
                    of wrapper object.  Alternatively use of the constructor and multiple injected
                    pre-instantiated objects could be used.
                  </para>
                </listItem>
                <listItem>
                  <para>
                    There is no way to require that some bean is instantiated before other beans are
                    created where the <legacyBold>dependency is indirect</legacyBold> (i.e. it is not realized in the object hierarchy.
                    The PureDI library user must take responsibility for creating the dependency before
                    instantiating the indirectly dependent beans.
                  </para>
                </listItem>
                <listItem>
                  <para>
                    Beans are associated with a <legacyBold>single profile</legacyBold>.  This restriction limits the ways in which
                    beans can be combined.
                  </para>
                </listItem>
              </listItem>
            </list>
          </content>
        </section>

        <section address="Gotchas">
          <title>Gotchas</title>
          <content>

            <list class="ordered">
              <listItem>
                <para>
                  <legacyBold>Exceptions Not Thrown: </legacyBold>Generally speaking where anomalies and inconsistencies are found
                  in the code subject to injection such as dangling bean references
                  no exception is thrown.  It is left to the library user to 
                  inspect the diagnostics returned in the injection state.
                </para>
              </listItem>
              <listItem>
                <para>
                  <legacyBold>Dangling Beans: </legacyBold>If a member is incorrectly marked as <codeInline>[BeanReference]</codeInline> then
                  it will be set to its default value even if it is an initialized member.
                </para>
                <para>A warning will be reported in the diagnostics</para>
              </listItem>
              <listItem>
                <para>
                  <legacyBold>Factories: </legacyBold>Factories must both have a <codeInline>[bean]</codeInline> attribute
                  and implement <codeInline>IFactory</codeInline>.  If a factory
                  has only one of these then this will be recorded in diagnostics (<codeInline>Diagnostics</codeInline>)
                </para>
              </listItem>
              <listItem>
                <para>
                  <legacyBold>Missing Beans: </legacyBold>A risk, particularly with multiple entry points, is that the library user will forget
                  to include required assemblies in the "assemblies" argument when the injector is first created.
                  As a consequence "missing bean" type errors will occur,
                </para>
              </listItem>
              <listItem>
                <para>
                  <legacyBold>Duplicate Beans: </legacyBold>If a number of beans implement some widely used interface such as <codeInline>IEnumerable of T</codeInline>
                  and that interface is used in the declaration of member variables which
                  are bean references then
                  each implementing class involved will require bean names so that the injector can
                  select the appropriate bean for a given injection with the widely used type
                </para>
              </listItem>
              <listItem>
                <para>
                  <legacyBold>Factory Names: </legacyBold>For factories, the bean name (if present) refers to the selection of the factory.
                  It does not relate in any way to the class which is instantiated by the factory
                </para>
              </listItem>
              <listItem>
                <para>As you would expect beans have not been injected at the points when the class's constructor is called</para>
              </listItem>
              <listItem>
                <para>
                  <legacyBold>Avoid Consructor Processing: </legacyBold>Avoid any processing of substance in beans' constructors.  There is a risk of inadvertently
                  accessing beans that have not been subject to injection.
                </para>
              </listItem>
              <listItem>
                <para>
                  <legacyBold>There is no magic.</legacyBold>  You cannot simply stick a bean reference on some bean
                  and expect injection to take place.  It must be in the graph produced by
                  <codeInline>CreateAndInjectDependencies</codeInline>.  You mix
                  calls to <codeInline>new</codeInline> and <codeInline>CreateAndInjectDependencies</codeInline>
                  at your own risk.
                </para>
              </listItem>
              <listItem>
                <para>
                  <legacyBold>Missing Root Bean: </legacyBold>If you specify the root bean of the object tree with an interface, make sure
                  that either that interface is declared in the main assembly scanned for injection
                  or that the assembly is passed as a parameter to the
                  <codeInline>PDependencyInjector</codeInline>'s constructor.
                </para>
              </listItem>
            </list>
          </content>
        </section>

      </sections>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
