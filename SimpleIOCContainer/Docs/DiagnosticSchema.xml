<?xml version="1.0" encoding="utf-8" ?>
<diagnosticSchema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="file://. DiagnosticSchemaSchema.xsd">
  <group>
    <topic>DuplicateBean</topic>
    <severity>Warning</severity>
    <intro>Duplicate beans have been detected.  
           The IOC container will be unable to determine which 
           class an injected reference refers to</intro>
    <background>If there are multiple implementations of some 
               interface or base class then use the bean's "name" 
               property to distinguish them and then include that 
               name in the bean reference whose value is to be injected</background>
    <userGuideTitle>Bean Names and Multiple Implementations</userGuideTitle>
    <userGuide>
Bean names address the case where there are multiple implementations of 
some interface and a bean reference needs to specify which implementation is required.
This is achieved by passing a `Name` property to the `[BeanReference]` attribute.

The following code (BeanNames.cs) illustrates this:
<div class="pre-scrollable">

```
{code-duplicateBean.cs}
```

</div>
      
Note:

* The bean reference can specify an interface (or a base class as long as it is
not itself a bean) as an alternative to specifiying
the implementation class.  It is left up to the
container to associate the reference with a concrete class.
* In the above example two repositories are instantiated; one for sql server 
and one for Mongo.  They both have share an interface but the container
uses the name specified in the bean reference to select the appropriate
implementation.
* If no name is spacified then this is equivalent to an empty string.  Unlike the case with 
_Profiles_ if no bean is found with a name matching that of the bean reference
then the bean instantiation will fail.
* Bean names are case insensitive.
    </userGuide>
    <userGuideSeeAlso/>
    <template>attempt to add duplicate bean: {Interface1} {BeanName}, 
              attempting to add ${NewBean}, when ${ExistingBean} is already included.
              </template>
    <artefacts>
      <Interface1/>
      <NewBean/>
      <BeanName/>
      <ExistingBean/>
    </artefacts>
  </group>
  <group>
    <topic>InvalidBean</topic>
    <severity>Warning</severity>
    <intro>A class has been marked as a bean (with 
      the "Bean" attribute) which is not capable of being 
      a bean.  The only types that can be beans are concrete non-static classes.</intro>
    <background>Typically this problem occurs with abstract and static
      classes.  Note that although the bean reference 
      where the injection takes place may be specified as a base
      class or interface, the "Bean" attribute should be applied 
      only to the concrete implementation, not to a parent 
      or interface</background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>{AbstractOrStaticClass} is {ClassMode}</template>
    <artefacts>
      <AbstractOrStaticClass/>
      <ClassMode/>
    </artefacts>
  </group>  
  <group>
    <topic>ReadOnlyProperty</topic>
    <severity>Warning</severity>
    <intro>An attempt has been made to set the value of an auto property.  The container
           cannot do this.</intro>
    <background>The container cannot set the value of an auto property as the
               operation is not supported by reflection.</background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>{Member} is an auto property on {Class}</template>
    <artefacts>
      <Class/>
      <Member/>
    </artefacts>
  </group>
  <group>
    <topic>MissingNoArgConstructor</topic>
    <severity>Warning</severity>
    <intro>A class or struct without a no-arg constructor has been encountered.  All types in the IOC tree must have no-arg constructors</intro>
    <background>The container needs to be able to construct the objects in the tree by reflection
    .For this it needs a non-static constructor
    which takes no arguments.  Alternatively a constructor annotated with the [Constructor] attribute
    can be specified together with all of its parameters annotated as [BeanReference]</background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>{Class} needs a no-arg constructor</template>
    <artefacts>
      <Class/>
    </artefacts>   
  </group>
  <group>
    <topic>MissingBean</topic>
    <severity>Warning</severity>
    <intro>A reference to a missing bean has been encountered</intro>
    <background>The most likely cause of this issue is that 
      you forgot to mark a bean with [Bean] or omitted its name for the [BeanReference] 
      or there are 
      duplicate beans or that the bean referred to was
      not a concrete class or struct.  (In the case of duplicates the details should be listed
      in the relevant diagnostics above).  Alternatively you may have attempted
      to mark as injectable a non-bean class such as a primitive, dynamic, tuple, array or 3rd party library class.
      This, of course, amounts to much the same thing.
      You may be attempting the bean through an interface that it does not implement.</background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>Missing bean referred to at: ({MemberType}({MemberBeanName})  {MemberName}) declared by {Bean}</template>
    <artefacts>
      <MemberType/>
      <MemberBeanName/>
      <MemberName/>
      <Bean/>
    </artefacts>  
  </group>  
  <group>
    <topic>MissingRootBean</topic>
    <severity>Warning</severity>
    <intro>The bean specified as the root of the tree cannot be found</intro>
    <background>The most likely cause of this issue is that 
      you forgot to mark a bean with [Bean] 
      or there are 
      duplicate beans or that the bean referred to was
      not a concrete class or struct.  (In the case of duplicates the details should be listed
      in the relevant diagnostics above).  Alternatively you may have attempted
      to access a non-bean class such as a primitive, dynamic, tuple, array or 3rd party library class.
      This, of course, amounts to much the same thing.
      You may be attempting the bean through an interface that it does not implement.</background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>Missing bean: {BeanType}({BeanName})</template>
    <artefacts>
      <BeanType/>
      <BeanName/>
    </artefacts>  
  </group>  
  <group>
    <topic>MissingRoot</topic>
    <severity>Warning</severity>
    <intro>The root of the class tree was not marked as [Bean] or the bean was invalid - see diagnostics above</intro>
    <background>The most likely cause of this issue is that the type passed
    to SimpleIOCContainer.CreateAndInjectDependencies was not marked as a bean.  [Bean] or the concrete class
    derived from the type was not marked as a bean.  Alternatively the bean may have been found
    to be invalid - see above</background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>Missing root bean referred to as: ({BeanType}({BeanName}))</template>
    <artefacts>
      <BeanType/>
      <BeanName/>
    </artefacts>  
  </group>
  <group>
    <topic>MissingFactory</topic>
    <severity>Warning</severity>
    <intro>No factory has been found for member(s) marked with a factory bean</intro>
    <background>
      Factory beans must be marked as beans [Bean].  They must be in an assembly passed to SimpleIOCContainer.SetAssemblies().
    </background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>Missing factory {Factory} for {DeclaringBean}.{Member}</template>
    <artefacts>
      <DeclaringBean/>
      <Member/>
      <Factory/>
    </artefacts>
  </group>
  <group>
    <topic>BadFactory</topic>
    <severity>Warning</severity>
    <intro>A factory has been found but it does not implement the required IFactory interface</intro>
    <background>
      Factory beans must be marked as beans [Bean].  They must also implement IFactory.
    </background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>Bad factory {Factory} for {DeclaringBean}.{Member}</template>
    <artefacts>
      <DeclaringBean/>
      <Member/>
      <Factory/>
    </artefacts>
  </group>
  <group>
    <topic>TypeMismatch</topic>
    <severity>Warning</severity>
    <intro>The type assigned to a member by a factory was incompatible</intro>
    <background>
      The type of the object returned by the Execute() method of a factory must be compatible with the
      type of the member to which it is being assigned
    </background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>
      The type returne from {Factory} for {DeclaringBean}.{Member}
      {ExpectedType} was expected.Excepton: {Exception}
    </template>
    <artefacts>
      <DeclaringBean/>
      <Member/>
      <Factory/>
      <ExpectedType/>
      <Exception/>
    </artefacts>
  </group>
  <group>
    <topic>FactoryExecutionFailure</topic>
    <severity>Warning</severity>
    <intro>An error occurred when creating a bean using bean factory</intro>
    <background>
      An exception was thrown during the Execute() method of a bean factory
    </background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>
      The exception thrown by {Factory} for {DeclaringBean}.{Member}
      was {Exception}
    </template>
    <artefacts>
      <DeclaringBean/>
      <Member/>
      <Factory/>
      <Exception/>
    </artefacts>
  </group>
  <group>
    <topic>CyclicalDepndency</topic>
    <severity>Warning</severity>
    <intro>A cyclical dependency was found in the object tree.  This is not supported</intro>
    <background>A cyclical dependency occurs when a class constructor includes
      a parameter whose own constructor includes a parameter of the original class.
      Add in intermediate ancestors to make this interesting
      a parent bean or </background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>The declaring bean {DeclaringBean} has cyclical dependency related to {ConstructorParam}</template>
    <artefacts>
      <DeclaringBean/>
      <ConstructorParam/>
    </artefacts>
  </group>
  <group>
    <topic>DuplicateConstructors</topic>
    <severity>Warning</severity>
    <intro>More than one suitable constructor is available for injection</intro>
    <background>
      The container needs an exact specification of the constructor to be run.
      Where there are two candidate constructors then each should be given a differnt "Name"
      and the "ConstructorName" parameter of the [BeanReference] should be used
      in the reference to the bean to indicate which constructor should be used.
    </background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>The declaring bean {Bean} has more than one applicable constructor</template>
    <artefacts>
      <Bean/>
    </artefacts>
  </group>
  <group>
    <topic>MissingConstructorParameterAttribute</topic>
    <severity>Warning</severity>
    <intro>A constructor has been found marked as [IOCConstructor] but one or more of whose parameters are not marked as [BeanReference]</intro>
    <background>
      In order to inject values into a class (bean) via the constructor its constructor must
      be marked with the [IOCCConstructor] attribute and all that constructor's parameters
      must be marked as [BeanReference].  If a parameter to be injected is not a
      bean then a factory bean can be used to provide the value and the constructor
      should be marked [BeanReference(Factory=typeof(SomeFactoryClass)]
    </background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>The declaring bean {Bean}'s constructor has unmarked parameters</template>
    <artefacts>
      <Bean/>
    </artefacts>
  </group>
  <group>
    <topic>MissingConstructorAttribute</topic>
    <severity>Warning</severity>
    <intro>A constructor has been found not marked as [IOCCConstructor] but one or more of whose parameters is marked as [BeanReference]</intro>
    <background>
      In order to inject values into a class (bean) via the constructor its constructor must
      be marked with the [IOCCConstructor] attribute and all that constructor's parameters
      must be marked as [BeanReference].
    </background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>One or more of the declaring bean {Bean}'s constructors is not marked as [IOCCConstructor] but has marked parameters</template>
    <artefacts>
      <Bean/>
    </artefacts>
  </group>
  <group>
    <topic>CyclicalDependency</topic>
    <severity>Warning</severity>
    <intro>Two beans has been found that are mutually dependent using constructor injection.  This is not supported</intro>
    <background>
      If a reference to Bean A is injected into Bean B's constructor and a reference to Bean B is
      injected into Bean A's constructor then there is no way to construct both beans.
    </background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>{Bean} has a cyclical dependency</template>
    <artefacts>
      <Bean/>
    </artefacts>
  </group>
  <group>
    <topic>UnreachableReference</topic>
    <severity>Warning</severity>
    <intro>A bean reference exists in a context where a bean cannot be injected</intro>
    <background>All members for which beans can be injected must exist within classes validly marked as [bean]s.</background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>{Type} has an unreachable member {MemberType} {MemberName}</template>
    <artefacts>
      <Type/>
      <MemberType/>
      <MemberName/>
    </artefacts>
  </group>
  <group>
    <topic>UnreachableConstructor</topic>
    <severity>Warning</severity>
    <intro>A injectable constructor exists in a context where a bean cannot be injected</intro>
    <background>All constructors for which beans can be injected must exist within classes validly marked as [bean]s.</background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>{Type} has an unreachable constructor</template>
    <artefacts>
      <Type/>
    </artefacts>
  </group>
  <group>
    <topic>NonBeanFactory</topic>
    <severity>Warning</severity>
    <intro>A class exists which implements the IFactory interface but which is not marked as a [Bean]</intro>
    <background>Factories must implement IFactory and be marked with the [Bean] attribute.</background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>{Type} implements IFactory but is not a bean</template>
    <artefacts>
      <Type/>
    </artefacts>
  </group>
  <group>
    <topic>AlreadyInitialised</topic>
    <severity>Warning</severity>
    <intro>A value is being injected into a member that has already been initialized</intro>
    <background>Values are injected after a bean has been instantiated, constructor has executed and member initialisations
      have occurred.  Any preceding initialisation will be obliterated by the injection</background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>The member, {Member}, of {DeclaringType} was already initialized with {ExistingValue}.  The
      value, {ExistingValue}, has been overwritten</template>
    <artefacts>
      <DeclaringType/>
      <Member/>
      <ExistingValue/>
    </artefacts>
  </group>
  <group>
    <topic>UnreachableStruct</topic>
    <severity>Warning</severity>
    <intro>An embedded struct bean exists which will never be instantiated</intro>
    <background>Embedded structs must be marked as [BeanReference] in order for their bean reference members to be injected</background>
    <userGuideTitle/>
    <userGuide/>
    <userGuideSeeAlso/>
    <template>{DeclaringType} has an unreachable member struct {MemberType} {MemberName}</template>
    <artefacts>
      <DeclaringType/>
      <MemberType/>
      <MemberName/>
    </artefacts>
  </group>
</diagnosticSchema>