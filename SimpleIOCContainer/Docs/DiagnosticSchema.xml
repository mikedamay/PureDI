<?xml version="1.0" encoding="utf-8" ?>
<diagnosticSchema>
  <group>
    <causeCode>DuplicateBean</causeCode>
    <severity>Warning</severity>
    <intro>Duplicate beans have been detected.  
           The IOC container will be unable to determine which 
           class an injected reference refers to</intro>
    <userGuide>If there are multiple implementations of some 
               interface or base class then use the bean's "name" 
               property to distinguish them and then include that 
               name in the bean reference whose value is to be injected</userGuide>
    <template>attempt to add duplicate bean: {Interface1} {BeanName}, 
              attempting to add ${NewBean}, when ${ExistingBean} is already included.
              </template>
    <artefacts>
      <Interface1/>
      <NewBean/>
      <BeanName/>
      <ExistingBean/>
    </artefacts>
  </group>
  <group>
    <causeCode>InvalidBean</causeCode>
    <severity>Warning</severity>
    <intro>A piece of code has been marked as a bean (with 
      the "IOCCBean" attribute) which is not capable of being 
      a bean.  The only types that can be beans are concrete classes.</intro>
    <userGuide>Typically this problem occurs with abstract 
      classes.  Note that although the bean reference 
      where the injection takes place may be specified as a base
      class or interface, the "IOCCBean" attribute should be applied 
      only to the concrete implementation, not to a parent 
      or interface</userGuide>
    <template>{AbstractClass} is an abstract class</template>
    <artefacts>
      <AbstractClass/>
    </artefacts>
  </group>  
  <group>
    <causeCode>ReadOnlyProperty</causeCode>
    <severity>Warning</severity>
    <intro>An attempt has been made to set the value of an auto property.  The container
           cannot do this.</intro>
    <userGuide>The container cannot set the value of an auto property as the
               operation is not supported by reflection.</userGuide>
    <template>{Member} is an auto property on {Class}</template>
    <artefacts>
      <Class/>
      <Member/>
    </artefacts>
  </group>
  <group>
    <causeCode>MissingNoArgConstructor</causeCode>
    <severity>Warning</severity>
    <intro>A class or struct without a no-arg constructor has been encountered.  All types in the IOC tree must have no-arg constructors</intro>
    <userGuide>The container needs to be able to construct the objects in the tree by reflection.  For this it needs a constructor
      which takes no arguments.</userGuide>
    <template>{Class} needs a no-arg constructor</template>
    <artefacts>
      <Class/>
    </artefacts>   
  </group>
  <group>
    <causeCode>MissingBean</causeCode>
    <severity>Warning</severity>
    <intro>A reference to a missing bean has been encountered</intro>
    <userGuide>The most likely cause of this issue is that 
      you forgot to mark a ben with [IOCCBean] or there are 
      duplicate beans or that the bean referred to was
      not a concrete class or struct.  The details should be listed
      in the relevant diagnostics above.</userGuide>
    <template>Missing bean referred to at: ({MemberType}({MemberBeanName})  {MemberName}) declared by {Bean}</template>
    <artefacts>
      <MemberType/>
      <MemberBeanName/>
      <MemberName/>
      <Bean/>
    </artefacts>  
  </group>  
  <group>
    <causeCode>MissingRoot</causeCode>
    <severity>Warning</severity>
    <intro>The root of the class tree was not marked as [IOCCBean] or the bean was invalid - see diagnostics above</intro>
    <userGuide>The most likely cause of this issue is that the type passed
    to IOCC.GetOrCreateObjectTree was not marked as a bean.  [IOCCBean] or the concrete class
    derived from the type was not marked as a bean.  Alternatively the bean may have been found
    to be invalid - see above</userGuide>
    <template>Missing root bean referred to as: ({BeanType}({BeanName}))</template>
    <artefacts>
      <BeanType/>
      <BeanName/>
    </artefacts>  
  </group>
  <group>
    <causeCode>MissingFactory</causeCode>
    <severity>Warning</severity>
    <intro>No factory has been found for member(s) marked with a factory bean</intro>
    <userGuide>
      Factory beans must be marked as beans [IOCCBean].  They must be in an assembly passed to IOCC.SetAssemblies().
    </userGuide>
    <template>Missing factory {Factory} for {DeclaringBean}.{Member}</template>
    <artefacts>
      <DeclaringBean/>
      <Member/>
      <Factory/>
    </artefacts>
  </group>
  <group>
    <causeCode>TypeMismatch</causeCode>
    <severity>Warning</severity>
    <intro>The type assigned to a member by a factory was incompatible</intro>
    <userGuide>
      The type of the object returned by the Execute() method of a factory must be compatible with the
      type of the member to which it is being assigned
    </userGuide>
    <template>
      The type returne from {Factory} for {DeclaringBean}.{Member}
      {ExpectedType} was expected.Excepton: {Exception}
    </template>
    <artefacts>
      <DeclaringBean/>
      <Member/>
      <Factory/>
      <ExpectedType/>
      <Exception/>
    </artefacts>
  </group>
  <group>
    <causeCode>FactoryExecutionFailure</causeCode>
    <severity>Warning</severity>
    <intro>An error occurred when creating a bean using bean factory</intro>
    <userGuide>
      An exception was thrown during the Execute() method of a bean factory
    </userGuide>
    <template>
      The exception thrown by {Factory} for {DeclaringBean}.{Member}
      was {Exception}
    </template>
    <artefacts>
      <DeclaringBean/>
      <Member/>
      <Factory/>
      <Exception/>
    </artefacts>
  </group>
</diagnosticSchema>