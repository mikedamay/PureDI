<?xml version="1.0" encoding="utf-8" ?>
<UserGuide xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="file://. UserGuide.xsd">
  <group>
    <topic>Introduction</topic>
    <userGuideTitle>Introduction to SimpleIOCContainer</userGuideTitle>
    <userGuide>
The SimpleIOCContainer (Simple Inversion of Control Container) is a
Dependency Injection (DI) framework promoting simplicity of use and
rich diagnostics.

Usage follows a simple pattern: the caller instantiates some key object
with a call to *SimpleIOCContainer.CreateAndInjectDependnecies* and that
object is instiated together with dependencies to which it refers
and so forth recursively through the tree of dependencies.

The call to *CreateAndInjectDependencies* is typically made at program
startup.  The framework is principally concerned with singletons that
have the same life span as the program.

A simple example (Introduction.cs) is as follows:

<div class="pre-scrollable">

```  
{code-Introduction.cs}
```

</div>


### Notes

* Classes to be injected are annotated with the *Bean* attribute.
* The site of the injection is annotated with the *BeanReference* attribute
* The member variable to be injected should an interface, a direct or indirect base class of the bean or the same class as the bean
* Once *CreateAndInjectDependencies has been called all beans will have been instantiated and assigned to any matching bean references.

### See Also

[Assemblies (or An early gotcha)](/Simple/diagnosticSchema/MissingBean.html)

[Profiles (or why bother with DI)](/Simple/userGuide/Profiles.html)

assemblies
factories
appropriate injection points
design rationale
IOCCIgnore
cyclical depenenecies
Limitations and Gotchas
Injection by construcor and constructor names
Base attributes

API:
Constructor
CreateAndInject... x 5
IOCCException
BeanAttribute / BeanBaseAttribute
BeanReferenceAttribute / BeanReferenceBaseAttribute
ConstructorAttribute / ConstructorBaseAttribute
IOCCIgnoreAttribute / IgnoreBaseAttribute
Diagnostics
Group
Diagnostic
AssemblyExclusion
IFactory
BeanFactoryArgs
    </userGuide>
    <userGuideSeeAlso/>
  </group>
  <group>
    <topic>Profiles</topic>
    <userGuideTitle>Profiles</userGuideTitle>
    <userGuide>

The essential purpose of dependency injection is to
allow classes to be used by some class in the program
to be swapped out without need to recode the calling
class in any way.

With the SimpleIOCContainer we accomplish that by
allowing a profile string to be associated with any
bean (class to be instantiated) by including
the string as a parameter to the *[Bean]* attribute.
The container can
be set up with a matching profile to ensure a
matching set of beans are instantiated.

The archetypical case is for testing which
is particularly pertinent for the SimpleIOCContainer
with its emphasis on injection into private
member variables.

The following example shows how mock functionality
can be injected:

<div class="pre-scrollable">

```  
{code-Profiles.cs}
```

</div>

Note:

* The *myRepository bean* is referenced through an interface (*IMyRepository*)
that the bean's class implements.
Base classes can perform the same role as interfaces provided that they
are not themselves marked as beans.
* There are two implementations of the interface: 
MyRepository which is the "production" implementation and *MyTestRepository*
available for testing purposes.
* The main program does not pass a profile when it creates the *SimpleIOCContainer*.
  Therefore the production version of IMyRepository is instantiated.
Howver the unit test passes a profile of "test" which matches the profile
for *MyTestRepository* and allows the repository to be mocked when testing *MyService*.
* *CreateAndInjectDependencies* will select a bean with a matching profile or, in the
absence of a matching bean, a bean with no profile.
* It is possible (and, in fact, usual) to specify multiple profiles to the 
*SimpleIOCContainer* constructor.  This enables fine grained control at run-time
of which implementations are to be used.

See Also:

[Bean Names (or one interface - two implementations)](/Simple/DiagnosticSchema/DuplicateBean.html)

    </userGuide>
    <userGuideSeeAlso/>
  </group>
</UserGuide>