
Typemap contains relationships between the types of potential references and the required implementation (bean class).
The references are either the implementation class, itself, a class or interface inherited by the
implementation.

The typemap needs to indicate the difference between a generic reference and a non-generic reference.

a) The typemap maps a relationship between the type of an implementation (bean class) and all the interfaces and classes in
  the class hierarchy through which it can be referenced including the type of the implementation itself.
b) Beans with a matching profile or no profile should be included as candidate bean classes.  Beans with 
  a non-matching profile are completely ignored.
c) Beans with a matching OS or no OS should be included as candidate bean classes.  Bean classes with 
  a non-matching OS are completely ignored.
d) Where multiple bean classes exist derived from some interface or parent class then the typemap should include
  the bean with a matching profile in preference to one with no profile.
e) Where multiple bean classes exist derived from some interface or parent class then the typemap should include
  the bean with a matching OS in preference to one with no OS.
f) Where multiple bean classes exist derived from some interface or parent class then the typemap should include
  the bean with a matching OS and profile in preference to any other candidate.
g) Rules d) to f) can be visualised by applying a "Precedence" to each candidate and selecting the candidate with the
  lowest Precedence number.
   Order of Precedence:
	1) Os && Profile
	2) Profile
	3) Os
	4) Vanilla
h) Where multiple canddidates (bean classes derived from a aingle reference) remain after applying
  all rules up to g) then a random one is selected and the others are reported as duplicates.
i) Static or abstract classes marked as beans are reported as invalid.  A compliation takes care of non-class
  entities given an attribute of [Bean].

mapObjectsCreatedSoFar (member of InjectionState) contains each implementation injected together with bean name and constructor name

instantiate-object of type (starting with the root type):
using the referenced type:
    find the implementation type in the type map
    discover the corresponding constructable type
    for each member of the constructable type
        instantiate-object of member's type
    for each constructor parameter of the constructable type
        instantiate-object of parameter's type
    construct object for the constructable type
    for each member
        assign instantiated object to member variable
        
Direct or indirect cyclical dependencies are detected
    if the dependency has constructor parameters then an exception is thrown **
    otherwise the dependency is instantiated immediately the cyclical dependency is detected.
        
        ** This is overkill.  We should care only if the cyclical dependency is a constructor parameter.  It
           might be a member variable notwithstanding the fact that the dependency has some constructor parameters
        
The implementation type is obtained by searching the typemap using the reference type as the search key.
The implementtion type is either a non-generic concrete class which implements the non-generic reference
or a generic with unbound parameters.

The constructable type is 
a) in the case of a non-generic, the implementation type or
b) in the case of a generic the type of the bean reference (as this will have its type parameters bound)
(this is a bad design as it does not cater for generic interfaces - there is a failing test).




        